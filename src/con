#!/home/user/.conveyor/runtime/dogfoodsoftware.com/conveyor-core/bin/php-cli-config
<?php
function usage($err_msg = null) {
    if ($err_msg != null) {
        # In CLI, we expect 'error_log' to go to stderr.
        error_log("ERROR: $err_msg\n");
    }
    
    echo "usage: con [action] <resource or item ID> [[param1=value1]...] [<json payload>]\n";
}

function process_params_and_data() {
    global $process_index;
    global $argc;
    global $argv;
    global $req_data;
    global $req_parameters;

    while ($process_index < $argc) {
        $argument = $argv[$process_index];
        if (preg_match("/\[|{/", $argument)) { // JSON data payload
            // The data payload must come last.
            if ($process_index + 1 != $argc) {
                usage("JSON data payload must be last element of request.");
                echo "argument: $argument\n";
                exit(400);
            }
            
            $req_data = json_decode($argument, true);
            if ($req_data == null) {
                usage("Last argument seemed like JSON data payload, but could not be parsed.");
                exit(400);
            }
        }
        else { // Attempt to parse argument as a request parameter.
            $bits = explode('=', $argument);
            $param_name = trim(array_shift($bits));
            if (!preg_match('/^[\w-]+$/', $param_name)) {
                usage("Disallowed parameter name: '$param_name'; must match /[\w-]/.");
                exit(400);
            }

            if (count($bits) > 0) {
                // Notice we do support something like: 'foo=bar=baz';
                // that would parse as parameter 'foo' with value
                // 'bar=baz'.
                $param_value = trim(implode('=', $bits));
            }
            else {
                $param_value = true;
            }

            $req_parameters[$param_name] = $param_value;
        }

        $process_index += 1;
    }
}

$home = $_ENV["HOME"];
require("$home/.conveyor/runtime/dogfoodsoftware.com/conveyor-core/runnable/lib/response-lib.php");
$response->set_output(Response::OUTPUT_CLI);

// Parse arguments.
$req_action = null;
if ($argc == 1 # means just the script name
    || !preg_match('/PUT|GET|POST|PATCH|GET|DELETE/i', $argv[1])) {
    $req_action = 'GET';
    $process_index = 1;
}
else {
    $req_action = strtoupper($argv[1]);
    $process_index = 2;
}

$req_accept = ($req_action == 'GET' ? 'text/plain' : 'application/json');

$req_path = $argc > $process_index ? $argv[$process_index] : null;
if (empty($req_path)) {
    # Special handling for just typing 'con'; not really valid, but no
    # need to be dicks about that. Give the user something useful.
    $req_path = '/documentation/help/CLI';
}
$process_index += 1;

# Accepts bear resource name, e.g. 'foo' , as well as '/foo', '/foo/',
#  and 'foo/'. Item IDs may not end with a '/'.
if (!preg_match('|/?([\w-]+)(/$)?((/+[\w-]+)*)|', $req_path, $matches)) {
    usage("Could not parse '$req_path' as valid request.");
    exit(400);
}
$req_resource = strtolower($matches[1]);
$req_item_id = count($matches) >= 3 ?
    substr($matches[3], 1) :
    null;
// We will defer processing of the '$req_parameters' and '$req_data'
// variables until we match the resource.
$req_parameters = array();
$req_data = null;

// No need to cache, this is very low flow CLI at the moment.
$home = $_ENV['HOME'];
// There may be many potential providers. The actual provider should be
// configured for apache, so we actually look for the HTTPD configs and then
// work out the provider from there.
$config_link = "$home/.conveyor/data/dogfoodsoftware.com/conveyor-apache/conf-inc/service-{$req_resource}.httpd.conf";
if (file_exists($config_link)) {
    if (!is_link($config_link)) {
        error_log("ERROR: Found configuration for resource '{$req_resource}', but it's not a link.");
        exit(51);
    }
    // Read the link to determine the actual provider location.
    $provider_location = dirname(dirname(readlink($config_link)));
    $handler_path = "$provider_location/runnable/domain-logic/{$req_resource}";

    $handler = strtolower($req_action)."-";
    $handler .= (empty($req_item_id) ? 'all' : 'item').'.php';

    if (!file_exists("$handler_path/${handler}")) {
        error_log("ERROR: Did not find expected '$handler' handler for '$req_path'.\n");
        exit(501);
    }
    process_params_and_data();

    require("$handler_path/$handler");
    // The handler is expected to invoke a final response method. If
    // not:
    $response->server_error("Handler failed to invoke final output.");
}
else {
    $response->item_not_found("'$req_path' not found. (No handler.)");
}
?>
