#!/bin/bash

FORCE=false
CONVEYOR_REPO=https://github.com/DogFoodSoftware/conveyor-core.git

# The playground would normally be set by "$HOME/.conveyor/config", but since
# we're the install script, they're set by us.
export CONVEYOR_PLAYGROUND=$HOME/playground

# We would normally use 'shflags' here as a third-party Conveyor standard
# component, but this is a standalone script so we use getopt directly. (TODO:
# ref http://liquid-labs.com/manuals/code-ops/ref/Toolbox#shflags; currently
# in draft and lacking 'manuals' support in conveyor.)
TMP=`getopt --name=$0 -a --longoptions=branch:,force,playground: -o b:,p: -- $@`
eval set -- $TMP

until [ $1 == -- ]; do
    case $1 in
	-p|--playground)
	    CONVEYOR_PLAYGROUND="$2"
	    shift;; # Remove option value.
        -b|--branch)
            BRANCH="$2"
            shift;; # Remove option value.
	--force)
	    FORCE=true;;
    esac
    shift # Remove just-processed option.
done
shift # Remove the '--', now $1 positioned at first argument if any.

# Set dependent variables.
export DFS_HOME=$CONVEYOR_PLAYGROUND/dogfoodsoftware.com
export CONVEYOR_HOME=$DFS_HOME/conveyor/core

if [ $FORCE != true ]; then
    # Check baseline assumptions.
    ERROR=false
    DISTRO_SUPPORT_STATEMENT="Conveyor 0.1 supports openSuSE 12.3 and 13.1."
    if [ ! -f /etc/SuSE-release ]; then
	echo $DISTRO_SUPPORT_STATEMENT >&2
    else
	# Wish the SuSE-release file was bash compatible...
	VERSION=`grep 'VERSION' /etc/SuSE-release | awk '{print $3}'`
	case "$VERSION" in
	    12.3|13.1)
		;; # that's fine
	    *) # anything else though...
		echo $DISTRO_SUPPORT_STATEMENT >&2
		ERROR=true
		;;
	esac
    fi
fi # FORCE check
# You can't force through the sudo check. If we can't sudo, we can't go on.
if [[ `sudo -n echo foo 2>/dev/null` != 'foo' ]]; then
    echo "Conveyor expects user to have full 'sudo' no-password privileges." >&2
    ERROR=true
fi
if [ x"$ERROR" == x"true" ]; then
    echo "Consider using using the Conveyor vagrant VM: TODO".
    exit 1
fi
# Baseline assumptions checked, time to start installing.

if [ -d $CONVEYOR_PLAYGROUND ]; then
    echo "It looks like Conveyor is already installed. To re-install, delete" >&2
    echo "'$CONVEYOR_PLAYGROUND' and re-run this script." >&2
    ERROR=true
fi
if [ -f $HOME/.conveyor/config ]; then
    echo 'Found $HOME/.conveyor/config file already in place. Please delete and re-run' >&2
    echo 'installation script.' >&2
    ERROR=true
fi
if [ x"$ERROR" == x"true" ]; then
    exit 1
fi

mkdir $HOME/.conveyor
# Recall, all these variables were set at the top of the script.
cat <<EOF > $HOME/.conveyor/config
export CONVEYOR_PLAYGROUND=$CONVEYOR_PLAYGROUND
export DFS_HOME=$DFS_HOME
export CONVEYOR_HOME=$CONVEYOR_HOME
EOF

mkdir -p $DFS_HOME
cd $DFS_HOME
mkdir `dirname $CONVEYOR_HOME`
cd `dirname $CONVEYOR_HOME`
if [ x"$BRANCH" != x"" ]; then
    git clone $CONVEYOR_REPO --branch $BRANCH `basename $CONVEYOR_HOME`
    RESULT=$?
else
    git clone $CONVEYOR_REPO `basename $CONVEYOR_HOME`
    RESULT=$?
fi

if [ $RESULT -ne 0 ]; then
    echo "Clone of the Conveyor repo failed." >&2
    exit 1
fi

source $CONVEYOR_HOME/conf/conveyor-project-dependencies.sh

for REQUIRED_PROJECT in $REQUIRED_PROJECTS; do
    if ! $CONVEYOR_HOME/bin/conveyor-project-install $REQUIRED_PROJECT; then
	echo "Error installing '$REQUIRED_PROJECT'" >&2
	exit 2
    fi
done

if [ x"$ERROR" == x"true" ]; then
    echo "You may use 'conveyor-project-install' to install required projects."
    echo "'conveyor-start' will also attempt to install any missing dependencies."
    exit 1
fi

# Now we add the 'convey' script to the user's PATH
# TODO: when updating, wil need to remove the previous seciton.
cat <<EOF >> $HOME/.bashrc
### Added by Conveyor configuration. ###
PATH="\$PATH:$CONVEYOR_HOME/bin"
### End Conveyor section. ###
EOF
