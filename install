#!/bin/bash

set -e

# /**
#  * <div id="Default-Values" class="section">
#  * <div class="section-header"><span>Default Values</span></div>
#  */
GITHUB_REF=DogFoodSoftware/conveyor-core
CONVEYOR_PLAYGROUND="$HOME/playground"
CONVEYOR_DATA="$HOME/data"
CONVEYOR_VER="master"
# /**
#  * </div><!-- #Default-Values.section -->
#  *
#  * <div id="Option-Processing" class="section">
#  * <div class="section-header"><span>Option Processing</span></div>
#  */


function usage() {
    echo "Installs and initializes a Conveyor environment on the host."
    echo
    echo "install [--force]"
    echo
    echo "Options:"
    echo
    echo "--force"
    echo "  Normally, we check that the target system is supported and there is no existing"
    echo "  installation. Forcing the install skips these particular checks. It can be used"
    echo "  to install on self-supported or experimental distros as well as to attempt (a"
    echo "  rather simple) repair of a broken or incomplete install."
    echo
    echo "--checkout-version|-c"
    echo "  Specifies the version to use. Note, the nix and git install each use independent"
    echo "  versions; even for two that would produce the same runtime."
    echo
    echo "--playground|-p <dir>"
    echo "  Specifies the location of playground."
    echo
}

FORCE_CORE=false
FORCE_DISTRO=false

TMP=`getopt --name=$0 -a --longoptions=force,playground -o f,p -- $@`
eval set -- $TMP

until [ $1 == -- ]; do
    case "$1" in
	-f|--force)
	    FORCE_CORE=true;;
	-p|--playground)
	    CONVEYOR_PLAYGROUND="$2"
	    shift;;
	-c|--checkout-version)
	    CHECKOUT_VERSION="$2"
	    shift;;
    esac
    shift
done
shift

PREREQUISITES_GOOD=true
# Need to be able to 'sudo' root for certain operations.  TODO: with
# the adoption of nix, some of the original motives for this are no
# longer true. For SOME use cases it is necessary, but not for basic
# operation. Before release, let's be sure and do test with this
# restriction removed to see how easy it is.
if [[ `sudo -n echo foo 2>/dev/null` != 'foo' ]]; then
    echo "Conveyor expects user to have full 'sudo' no-password privileges." >&2
    PREREQUISITES_GOOD='false'
fi
if [[ $PREREQUISITES_GOOD != 'true' ]]; then
    echo "Consider using using the Conveyor vagrant VM:".
    echo "  curl -o Vagrantfile -fsSL https://raw.githubusercontent.com/DogFoodSoftware/conveyor-core/master/Vagrantfile"
    echo "  vagrant up"
    exit 1
fi
# TODO: do a dry run to check whether we can connect to the git repo.
# /**
#  * </div><!-- #Prerequisite-Checks.section -->
#  */

for i in "$CONVEYOR_PLAYGROUND" \
         "$CONVEYOR_DATA/files" \
         "$CONVEYOR_DATA/data/conf/html/ui" \
         "$CONVYEOR_DATA/apps"; do
    if [ ! -d "$i" ]; then
	mkdir -p "$i"
    fi
done

cd "$CONVEYOR_PLAYGROUND"
# We checkout via HTTPS in case the 'ssh-agent' isn't available when
# the script is run; such as when the script is run with an alternate
# user using 'sudo'.
git clone -b $CONVEYOR_VER --depth 1 https://github.com/${GITHUB_REF}.git $GITHUB_REF
# But then swtich to SSH for easy updates for those with authorized keys.
cd "$GITHUB_REF"
git remote set-url origin git@github.com:${GITHUB_REF}.git

PROJECT_HOME="${CONVEYOR_PLAYGROUND}/${GITHUB_REF}"

# Link in the HTML template pages.
for i in `${PROJECT_HOME}/conf/html/template-page-*.php`; do
    ln -s "$i" $HOME/data/conf/html/
done

# Link in the REST service configurations.
for i in `ls ${PROJECT_HOME}/conf/service-*.nginx.conf`; do
    ln -s "$i" /etc/nginx/services
done
patch /etc/nginx/fastcgi_params $HOME/playground/DogFoodSoftware/conveyor-core/conf/fastcgi_params.nginx.patch
sudo service nginx restart

# TODO: Really, we should process the file for the directive and append...
patch /etc/php5/fpm/php.ini $HOME/playground/DogFoodSoftware/conveyor-core/conf/php5-fpm-ini.patch
sudo service php5-fpm restart

