<div id="Overview" class="blurbSummary grid_12">
  <div class="p">
    The Conveyor command line interface (CLI) is accessed through
    the <code>con</code> command, which is installed as part of the
    core Conveyor package. The CLI syntax follows and maps directly to
    the <a href="Conveyor-REST-API-Standards">Conveyor REST API</a>.
  </div>
</div>
<div id="Basic-Syntax" class="blurbSummary grid_12">
  <div class="blurbTitle">Basic Syntax</div>
  <div class="p">
    The basic syntax is:
<pre><code>
con [action] &lt;resource&gt; [[param1=value1]...] ['{...json payload...}']
</pre></code> Where 'action' is one
    of <code>GET</code>, <code>PUT</code>, <code>POST</code>, <code>PATCH</code>,
    or <code>DELETE</code>. If the first argument is anything but
    these five options (ignoring case), the the default
    action <code>GET</code> is assumed and the first argument is
    interpretted as a resource identifier. Following the resource
    identifier are zero or more parameters. The final, optional
    argument is a JSON payload.
  </div>
</div><!-- #Basic-Syntax -->
<div id="Parameters-and-Payload" class="blurbSummary grid_12">
  <div class="blurbTitle">Parameters and Payload</div>
  <div class="p">
    Parameters and payload may be required or optional based on the
    resource and action. The CLI result code follow HTTP standards for
    the most part and unrecognized parameters, invalid parameter
    values, or an invalid payload will result in a '400'
    See <a href="#CLI-Return-Codes">CLI Return Codes</a> for more
    details.
  </div>
  <div class="p">
    Parameter names are always bare (not quoted). Parameter values may
    be bare or quoted. Bare values are treated as URL parameter
    literals and, for instance, a space would need to be encoded by
    '%20'. Quoted parameters are escaped, and so
    '<code>param=foo%20bar<code>' is equivalent to '<code>param="foo
    bar"</code>'. It is possible to embed single quotes in double
    quotes and vice-versa. If you need to use both, it will be
    necessary to leave the parameter bare and do the encoding
    yourself.
  </div>
  <div class="p">
    Payload documents are necessary for <code>PUT</code> requests,
    wherein the define the data to be 'put' to the server,
    and <code>PATCH</code> requests, which follow
    the <a href="http://jsonapi.org/format/#patch">JSON API PATCH
    specification</a>. They may also be required for certain complex
    operations of any request type.
  </div>
</div><!-- #Parameters-and-Payload -->
<div id="CLI-Return-Codes" class="blurbSummary grid_12">
  <div class="blurbTitle">CLI Return Codes</div>
  <div class="p">
    As mentioned, the <code>con</code> command will exit / return with
    the equivalent HTTP response code, excepting that '201'
    ('created') for <code>PUT</code> and '200' ('OK') for all other
    successful actions will result in a bash return code of '0'. User
    agents should expect '0' (== 200/201) or any of the 4xx and 5xx
    return codes. The CLI will never respond with 3xx statti.
  </div>
</div><!-- #CLI-Return-Codes -->
<div id="CLI-Output" class="blurbSummary grid_12">
  <div class="blurbTitle">CLI Output</div>
  <div class="p">
    The <code>con</code> command will output informational and error
    reports to the user, as well as any data received from the
    call. The particular behavior may be influenced
    by <code>-q|--quite</code>, <code>-qq|--very-quite</code>,
    and <code>--verbose</code> flags.
  </div>
  <div class="subHeader"><span>Informational Output</span></div>
  <div class="p">
    Informational output are informational messages intended primarily
    for a human operator. There are four classes of informational
    messages: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>,
    and <code>ERROR</code>.<span data-perspective="detailed">
    Following bash conventions, the first two are sent
    to <code>stdin</code> and the latter two
    to <code>stderr</code>.</span> <code>DEBUG</code> messages
    generally contain technical details useful for debugging or other
    technical purposes. <code>INFO</code> messages provide
    confirmation and provide details about basic operation and every
    successful request should generate at least one <code>INFO</code>
    message. <code>WARNING</code> messages provide information about
    unexpected or erronous conditions which none-the-less do not
    in-and-of-themselves prevent the request from successfully
    completing. <code>ERROR</code> messages provide details about
    conditions which prevent the request from completing. Every
    unsuccessful request should result in at least
    one <code>ERROR</code> message.
  </div>
  <div class="p">
    The default behavior is to show <code>INFO</code>, 
    <code>WARNING<code>, and <code>ERROR</code>
    messages. <code>DEBUG</code> messages will be output if
    the <code>--verbose</code> flag is included,
    while <code>-q|--quite</code> suppresses <code>INFO</code>
    and <code>-qq|--very-quite</code> suppresses all output (in which
    case the user is expected to refer to the return code to determine
    the basic status of the result).
  </div>
  <div class="subHeader"><span>Request Data</span></div>
  <div class="p">
    CLI requests by default ask for plain text, if available, and
    accept JSON if not. All Conveyor API provide at least JSON and so
    it is not possible for a request to fail because of unsupported
    document types.<span data-perspective="detailed"> Formally, the
    HTTP 'Accept' header is <code>text/plain;
    application/json</code>.</span> These document types can be
    modified with the <code>--accept</code> flag, though currently the
    only useful value for the flag is '<code>application/json</code>'
    which is used to request that the response provide JSON data even
    if a text response is possible. Attempting any other value
    currently results in a HTTP 400 / Bad Request response.
  </div>
</div><!-- #CLI-Output -->
