<div id="Overview" class="blurbSummary grid_12">
  <div class="p">
    A Conveyor runtime is laid out on disk under the 'Conveyor
    playground'. Layout within the playground is discussed in terms of the
    project layout, and intra-project contents.
  </div>
</div>
<div id="Project-Layout" class="blurbSummary grid_12">
  <div class="blurbTitle">Project Layout</div>
  <div class="p">
    All project files are organized within a single project home
    directory. The project exist entirely within the Conveyor playground. The
    playground location is specified when the conveyor core is installed. The
    default value is <code>$HOME/playground</code>.
  </div>
  <div class="p">
    Within this playground, each project declares the location of it's home
    directory. All operatings dealing with the project must make no assumption
    regarding the location of the project home directory within the
    playground. However, we do require public projects to conform to certain
    conventions to be considered Conveyor compliant.
  </div>
  <div id="Organization-Namespaces" class="subHeader"><span>Organization Namespaces</span></code>
  <div class="p">
    Within the playground, each project should be rooted in a directory named
    after an root internet domain owned by the organization / individual
    owning the project. E.g., the core Conveyor development is done by Dog
    Food Software, LLC and organized under the
    directory <code>dogfoodsoftware.com<code>. Private projects need need not
    follow this convention.
  </div>
  <div class="p">
    The namespace owners are free to organize projects within this namespace
    any way they see fit. Projects may be organized into groups, sub-groups,
    etc. Some or all projects may be placed directly under the organization's
    root directory.
  </div>
</div><!-- #Project-Layout -->
<div id="Intra-Project-Files" class="blurbSummary grid_12">
  <div class="blurbTitle">Intra-Project Files</div>
  <div class="p">
    Within each project, Conveyor mandates compliance to the following tree:
    <ul>
      <li><code>bin/</code>: executable (binaries and scripts) specific to the
	project. These files are only updated by project updates.</li>
      <li><code>conf/</code>: configuration files for Conveyor and other
	Conveyor projects. These files are only updated by project
	updates.<span data-perspective="detailed"> Some projects, however,
	may maintain runtime configuration files under the <code>/data</code>
	directory which are udf </li>
      <li><code>data/</code>: contains runtime dynamic data, such as database
	files. This directory is always ignored by the git repo. Files may be
	updated by runtime or version updates.</li>
      <li><code>static-data/</code>: contains (relatively) static data, like
	documentation pages. These files are tracked by the git repo and may
	be updated by the runtime or version updates.</li>
      <li><code>static-resources/</code>: contains (relatively) static
	resources which may directly accessed and served by the HTTP
	server. E.g., images, video, etc. These files are tracked by
	git. Smaller files may be included directly, and larger files are
	generally included by reference to an external directory. E.g., as a
	symlink. May be updated by runtime or version updates.</li>
      <li><code>runnable/</code>: contains the runtime-ready files. In many
	cases&mdash;as with PHP projects&mdash;<code>runnable</code> is a
	sym-link to the <code>src/</code> directory. In this
	case, <code>runnable</code> is included in the git repo. In casess
	where the project src does need to be compiled, <code>runnable</code>
	is generated at install time and ignored by git. This is updated
	soley by version updates.</li>
      <li><code>src/<code>: this is where all source / code files
      live. Updated exclusively by version updates.</li>
    </ul>
  </div>
  <div class="p">
    <code>conf/</code> details: every Conveyor project must define
    a <code>conveyor-config.sh</code> (TODO: link). Projects with dependencies
    will define <code>conveyor-projects-dependencies.sh</code>. Projects
    providing web resources will define <code>httpd.conf</code>. Projects
    exporting (typically websites) defining CSS and/or JS bundles will
    define <code>minify.php</code>. Other project specific configuration files
    may also be located here.
  </div>
</div><!-- #Runtime-Layout.blurbSummary -->
<div id="Repository-Layout" class="blurbSummary grid_12">
  <div class="blurbTitle">Repository Layout</div>
  <div class="p">
    The repository layout deals exclusively with the naming and organization of
    projects within a repository. The layout of the repos contents are
    described in the <a href="#Runtime-Layout">runtime layout</a>.
  </div>
  <div class="p">
    With a vanilla git sever&mdash;where repositorys are just directories on
    some host&mdash;it is permissible to layout the projects in the same
    manner as a <a href="#Runtime-Projects">runtime project
    layout</a>. However, we want to Conveyor projects to be compatible with
    GitHub, which is rather more limited in it's layout options, and hence
    define an alternative repository layout.
  </div>
  <div class="p">
    Conveyor itself does not enforce any particular GitHub naming
    scheme. The <code>&lt;project&gt;/conf/conveyor-conf.sh</code> file
    specifies the runtime loctaion of the project (which is more tightly
    regulated), and there is no hard connection between the two
    names. However, in order to make it easier for humans to find projects on
    GitHub, we recommend the following conventions.
  </div>
  <div class="p">
    Specifically, whereas a basic filesystem allows arbitrary nesting, GitHub
    allows only a single level of file grouping under an 'Organization'. The
    first level domain folder in the runtime should be mapped to a GitHub
    Organization. The GitHub Organizations should be related to the domain
    name, but is not usually itself a domain name. For instance, the Conveyor
    core packages are installed under <code>dogfoodsoftware.com</code> in a
    runtime environment, while the GitHub Organization is 'DogFoodSoftware'.
  </div>
  <div class="p">
    The (potentially) nested project structure from the runtime layout is
    necessarily flattened. In order to facilitate organization, containing
    folders are generally pre-pennded to the project
    name. E.g. the runtime <code>~/dogfoodsoftware.com/conveyor/core</code>
    becomes <code>/DogFoodSoftware/conveyor-core.git</code> on GitHub.
  </div>
  <div class="p">
    Developers managing many projects, or wishing to separate key projects
    into their own groups, may break up the GitHub projects further by
    introducing additional 'Organizations', which in this case are used more
    as groups. These groups should, but are not required, to reflect the
    organization name. E.g., in the future, we expect to migrate the Dog Food
    Software jQuery projects to 'DFS-jQuery'
  </div>
</div><!-- #Repository-Layot.blurbSummary -->
