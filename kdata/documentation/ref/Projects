<div id="Overview" class="blurbSummary grid_12">
  <div class="p">
    A project is the primary unit of development. Beyond that, a project can
    be for almost any purpose and
    project <a href="#Provisions-and-Dependencies">provisionsn and
    dependencies</a> are essentially arbitary. All Conveyor projects, however, adhere to a
    high <a href="#Project-Documentation">standard of documentation</a> and
    there are some <a href="Common-Provisions">common categories</a> worth
    discussing directly.
</div><!-- .blurbSummary#Overview -->
<div id="Project-Documentation" class="blurbSummary grid_12">
  <div class="p">
    While not exhaustive, most provisions can be placed into one of five
    categories:
    <ul>
      <li>a stack service,</li>
      <li>REST services,</li>
      <li>a website,</li>
      <li>encoded knowledge / process, or</li>
      <li>library or support provisions.</li>
    </ul>
    In general, a project will provide a small number&mdash;between one and
    four say&mdash;of primary provisions, sometimes with a few secondary
    libraries or such. 
  </div>
  <div class="p">
    Dependencies in Conveyor are actually quite simple and are expressed at
    the project level. Unlike more complex systems like rpm and deps, Conveyor
    dependencies are not self-verifying in any way. When composing packages
    for a runtime system, the author verifies the choices and creates the
    recipe themselves. Conveyor merely installs the projects requested.
  </div>
  <div id="Common-Provisions" class="subHeader"><span>Common
  Provisions</span></div>
  <div class="p">
    Conveyor does not prescribe what a package can or can't provide, though we
    do define five common provision types: stack services, REST resource, a
    website, encoded knowledge / process, and library / support
    provisions. Here, we give a quick rundown of these common provisions.
  </div>
  <div class="p">
    <em>Stack services</em> are 'low level' services provided by third party
    binaries and services. The Apache web server, apache-httpd, and Postgres
    database service are typical examples. Conveyor projects provide these
    services by wrapping the installation and management of the services in
    Conveyor installation protocol and REST services.
  </div>
  <div class="p">
    <em>REST resources</em> are the bread and butter of Conveyor. REST
    resources show up most visibly as the first element in the URL path such
    as <code>/documentation</code> and <code>/projects</code>. Projects
    provide these resources by implementing and configuring handlers for the
    resource type.
  </div>
  <div class="p">
    <em>Websites</em> is exactly what it says. A website. Typically, an
    organization will maintain one or more websites, each bound to a
    particular domain name. Websites are the entry point for all user
    activity. They define the style, content, and applications available in
    the given domain.
  </div>
  <div class="p">
    <em>Encoded knowledge</em> represents knowledge and process which may be
    referenced and processed through Conveyor services and/or by human
    readers. The encoding is typically organized into 'manuals' published by
    organization. For instance, an organization may create an operations
    manual for administrators and a developers manual encoding development
    process.
  </div>
  <div class="p">
    <em>Libraries</em> and other support provisions define common code and
    content to be referenced and used by other projects /
    provisions. Internal libraries not intended for use outside of a
    particular project are generally not declared as provisions. Declared
    libraries are intendend for 'public' consumption. These may be included as
    secondary provisions in support of other provisions, or&mdash;with certain
    important or key libraries&mdash;they may be distributed as the primary
    provision themselves.
  </div>
</div><!-- #Provsions-and-Dependencies -->
<div id="Project-Documentation" class="blurbSummary grid_12">
  <div class="p">
    Conveyor project documentation standards require that a project:
    <ul>
      <li>address the potential audience clearly and directly through the use
	of <a href="/documentation/kwiki/Primer#Perspectives">documentation
	perspectives</a>,</li>
      <li>include clear installation instructions,</li>
      <li>include clear usage instructions,</li>
      <li>address project design and scope,</li>
      <li>fully document implementation,</li>
      <li>support both top-down and bottom-up discovery.</li>
    </ul>
  </div>
</div><!-- #Project-Documentation -->
<div id="Project-Repositories" class="blurbSummary grid_12">
  <div class="blurbTitle">Project Repositories</div>
  <div class="p">
    When possible, git repositories should be laid out along the same lines as
    the runtime layout, with a root direcotry containing organization domains,
    which in turn contain projects or project
    groups.<span data-perspective="future"> The upcoming Conveyor managed git
    host does exactly this.</span> As many if not most projects utilize
    GitHub&mdash;which does not allow general groups&mdash;there is no general
    requirement.
  </div>
  <div class="p">
    Each Conveyor project must declare it's runtime location
    in <code>conf/conveyor-conf.sh</code>, and the location of the repository
    is functionally irrelevant. If not laying out the repositories to mirror
    the runtime locations, we reccomend the following conventions:
    <ul>
      <li>For projects primarily 'wrapping' third party software, repository
	names should begin with <code>_third-party-</code>.</li>
      <li>For projects primarily providing REST resource and core Conveyor
	libraries, repository names should begin
	with <code>conveyor-</code>.</li>
      <li>For projects primarily providing websites, repository names should
	begin with the domain of the website with the
	suffix <code>-website</code>.</li>
      </ul>
  </div>
</div><!-- .blurbSummary#Project-Repositories -->
<div id="Additional-Project-Properties" class="blurbSummary grid_12">
  <div class="blurbTitle">Additional Project Properties</div>
  <div class="p">
    Every bit in under Conveyor control lives within a single project. This
    means every file, image, and artificat has one and only one home. Projects
    may reference artifacts through symbolic links.
  </div>
  <div class="p">
    Projects may make use of 'distro services' and libraries. These are
    installed by the project installation process, but are not otherwise
    managed by the projects per se. It is possible (and planned) to offer
    distribution / external service management services as provisions of
    projects in the future.
  </div>
</div><!-- #Additional-Project-Properties -->
<div id="Further-Reading" class="blurbSummary grid_12">
  <div class="blurbTitle">Further Reading</div>
  <ul class="p">
    <li>The <a href="/documentation/conveyor-core/ref/File-System-Layout#Project-Repositories">file
    system layout</a> discusses the layout of projects and project files in a
    runtime environment.</li>
  </ul>
</div>
