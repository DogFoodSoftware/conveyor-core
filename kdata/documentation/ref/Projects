<div id="Overview" class="blurbSummary grid_12">
  <div class="p">
    A project is the primary unit of development. Projects can organize a wide
    variety of work, and there's no hard definition of what a project can or
    can't do, however a Conveyor projects adhere to a
    high <a href="#Project-Documentation">standard of documentation</a> and
    can generally be placed in one of four <a href="Project-Categories">categories</a>.
</div><!-- .blurbSummary#Overview -->
<div id="Project-Documentation" class="blurbSummary grid_12">
  <div class="p">
    Conveyor project documentation standards require that a project:
    <ul>
      <li>address the potential audience clearly and directly through the use
	of <a href="/documentation/kwiki/Primer#Perspectives">documentation
	perspectives</a>,</li>
      <li>include clear installation instructions,</li>
      <li>include clear usage instructions,</li>
      <li>address project design and scope,</li>
      <li>fully document implementation,</li>
      <li>support both top-down and bottom-up discovery.</li>
    </ul>
  </div>
</div><!-- #Project-Documentation -->
<div id="Project-Categories" class="blurbSummary grid_12">
  <div class="p">
    While not prescriptive, most projects can be categorized into one of four
    categories:
    <ul>
      <li>a stack service,</li>
      <li>REST services,</li>
      <li>a website, or</li>
      <li>encoded knowledge / process.</li>
    </ul>
    The categorization is not strict, and this is an area we will likely
    revisit in the future, perhaps replacing with a more general purpose
    tagging mechanism. For the time being, all the projects we've developed
    ourselves fall into one of these categories and we find them useful to
    understand the space.

    In general, projects should be simple 'units of development'. However, we
    also want to avoid unecessary balkanization and abstraction for the sake
    of abstraction. To paraphrase a paraphrase, the objective is that each 

Every
    artifact<span data-perspective="detailed coding"> (dynamic and
    static)</span> lives within a single project. In general, Conveyor
    projects provide a stack service, library code, one or more Conveyor REST
    services, encoded knowledge / process, 
  </div>
</div><!-- #Project-Categories -->
<div id="Project-Repositories" class="blurbSummary grid_12">
  <div class="blurbTitle">Project Repositories</div>
  <div class="p">
    TODO: this section is way too long. This shouldbe a paragraph or two at
    most.
  </div>
  <div class="p">
    With a vanilla git sever&mdash;where repositorys are just directories on
    some host&mdash;it is permissible to layout the projects in the same
    manner as a <a href="#Runtime-Projects">runtime project
    layout</a>. However, we want to Conveyor projects to be compatible with
    GitHub, which is rather more limited in it's layout options, and hence
    define an alternative repository layout.
  </div>
  <div class="p">
    Conveyor itself does not enforce any particular GitHub naming
    scheme. The <code>&lt;project&gt;/conf/conveyor-conf.sh</code> file
    specifies the runtime loctaion of the project (which is more tightly
    regulated), and there is no hard connection between the two
    names. However, in order to make it easier for humans to find projects on
    GitHub, we recommend the following conventions.
  </div>
  <div class="p">
    Specifically, whereas a basic filesystem allows arbitrary nesting, GitHub
    allows only a single level of file grouping under an 'Organization'. The
    first level domain folder in the runtime should be mapped to a GitHub
    Organization. The GitHub Organizations should be related to the domain
    name, but is not usually itself a domain name. For instance, the Conveyor
    core packages are installed under <code>dogfoodsoftware.com</code> in a
    runtime environment, while the GitHub Organization is 'DogFoodSoftware'.
  </div>
  <div class="p">
    The (potentially) nested project structure from the runtime layout is
    necessarily flattened. In order to facilitate organization, containing
    folders are generally pre-pennded to the project
    name. E.g. the runtime <code>~/dogfoodsoftware.com/conveyor/core</code>
    becomes <code>/DogFoodSoftware/conveyor-core.git</code> on GitHub.
  </div>
  <div class="p">
    Developers managing many projects, or wishing to separate key projects
    into their own groups, may break up the GitHub projects further by
    introducing additional 'Organizations', which in this case are used more
    as groups. These groups should, but are not required, to reflect the
    organization name. E.g., in the future, we expect to migrate the Dog Food
    Software jQuery projects to 'DFS-jQuery'
  </div>
</div><!-- .blurbSummary#Project-Repositories -->
<div id="Further-Reading" class="blurbSummary grid_12">
  <div class="blurbTitle">Further Reading</div>
  <ul class="p">
    <li>The <a href="/documentation/conveyor-core/ref/File-System-Layout#Project-Repositories">file
    system layout</a> discusses the layout of projects and project files in a
    runtime environment.</li>
  </ul>
</div>
