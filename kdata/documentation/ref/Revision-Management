<div id="Overview" class="blurbSummary grid_12">
  <div class="p">
    <div class="grid_4 alpha">    
      <div class="subHeader"><span>Developers</span></div>
      <ol style="text-indent: -2em">
	<li>Checkout a topic.</li>
	<li>Commit changes to the topic.</li>
	<li>Submit the changes to the topic.</li>
      </ol>
    </div><!-- developers blurb -->
    <div class="grid_4">
      <div class="subHeader"><span>Merge Masters</span></div>
      <ol style="text-indent: -2em">
	<li>Review topic changes.</li>
	<li>Accept or decline the changes.</li>
      </ol>
    </div><!-- merge masters blurb -->
    <div class="grid_4 omega">
      <div class="subHeader"><span>Operations</span></div>
      <ol style="text-indent: -2em">
	<li>Start a release cycle.</li>
	<li>Publish a release candidate.</li>
	<li>Select release for production.</li>
      </ol>
    </div><!-- operations blurb --> 
    <div class="clear"></div>
  </div>
</div><!-- #Overview.blurbSummary -->
<div id="Basic-Model" class="blurbSummary grid_12">
  <div class="blurbTitle">Basic Model</div>
  <div class="p">
    The Conveyor release management model makes use of two
    resources: <code>topics</code>
    and <code>releases</code>. <code>Topics</code> isolate changes to all
    project artifacts. <code>Releases</code> manage public runtime versions. 
  </div>
  <div class="p">
    Every change on the system begins with
    a <code>task</code>. <code>Tasks</code> manage changes from a high level,
    planning point of view. <code>Topics</code> isolate changes at the lower
    level of bits and files. <code>Topics</code> (and <code>releases</code>)
    can be used independently as part
    of <a href="/documentation/git-convey/">Git-Convey</a>.
  </div>
  <div class="p">
    When a <code>task</code> is accepted, a topic branch is cut from
    the <code>task</code>'s source branch. This also creates
    the <code>topic</code> resource, and the topic branch is managed by
    the <code>topic</code> resource. Changes are made within
    the <code>topic</code>, and then submitted for acceptance.
  </div>
  <div class="p">
    When a submitted <code>topic</code> is accepted, the changes are merged
    back to the original source branch. If the source branch was already part
    of a <code>release</code>, then the changes are (more or less) instantly
    published. In most cases, the changes migrate back to
    the <code>master</code> branch.
  </div>
  <div class="p">
    A <code>release</code> is cut from a source branch in order to identify
    and manage versions destined for public consumption. Again,
    the <code>release</code> is generally, but not necessarily, created
    from <code>master</code> branch. These release versions generally move
    through a testing phase before finally being promoted to a production
    runtime environment.
  </div>
</div><!-- #Basic-Model.blurbSummary -->
<div id="Master-Branch" class="blurbSummary grid_12">
  <div class="blurbTitle">Master Branch</div>
  <div class="p">
    
  </div>
</div><!-- #Master-Branch.blurbSummary -->
<div id="Release-Cycle" class="blurbSummary grid_12">
  <div class="blurbTitle">Release Cycle</div>

  <div class="p">
    All change commits&mdash;except branch merges&mdash;are made on topic
    branches. New topics are cut from and merge to the <code>master</code>
    branch<span data-perspective="detailed"> by
    default</span>.<span data-perspective="detailed"> This default branch
    will, as far as git-convey is concerned, maintain a strictly contiguous
    commit history through all time. In this sense, it is the only
    conceptually permanent branch in the repository and will be referred to as
    the 'permanent branch' to avoid confusion in cases where it goes by a
    namer other than the default <code>master</code>
    branch.</span><span data-perspective="detailed"><span class="note">That
    is, by default the <code>master</code> branch is the target of new
    development. The default branch may be changed in order to maintain
    compatibility with strategies which use <code>master</code> as the release
    branch when it is not possible to reconfigure the other
    strategy.</span></span> A release cycle begins with the creation of
    a <code>testing-*</code>, cut from the
    <code data-perspective="!detailed">master</code><span data-perspective="detailed">permanent</span>
    branch. The <code>testing-*</code> branch is subjected to the QA process,
    and then promoted to a <code>release-*</code>
    branch.<span data-perspective="detailed"> The promotion process also
    manages the tags which are used by any runtime environments, such as for
    QA, demos, and production.</span>
  </div>
  <div class="p">
    This release process naturally fits with projects, which initially have no
    testing or release branches, existing simple projects, which may maintain
    a single release and zero or one testing branches, or complex projects
    with many simultaneous release cycles and supported versions. Note too
    that the cycles may be milestone or date driven.
  </div>
</div><!-- #Release-Cycle.blurbSummary -->
<div id="Topics" class="blurbSummary grid_12">
  <div class="blurbTitle">Topics</div>
  <div class="p">
    'Topics' refers to 'topic branches', meaning a short lived development
    branch meant to isolate changes related to a single topic as a kind of
    reasonable unit of work. The model treats any change to the code as
    percipitating from some external 
  </div>
</div><!-- #Topics.blurbSummary -->

<div id="Topic-Branches" class="blurbSummary grid_12">
  <div class="blurbTitle">Topic Branches</div>
  <div class="p">
    Every change in the system is first introduced in a topic branch. There are
    three variations:
    <ul>
      <li><code>task-*</code> branches are cut from <code>master</code> and
      are most typically associated with new features, refactors, and
      non-critical bug fixes.</li>
      <li><code>bugfix-*</code> branches are cut from <code>testing</code> and
      always represent bug fixes.</li>
      <li><code>hotfix-*</code> branches are cut from a <code>release-*</code>
      branch and alays represent bug fixes.</li>
    </ul>
  </div>
  <div class="p">
    Note that the topic branch prefix is determined by the source branch and
    not by the purpose per-se. Bugs may be fixed on <code>master</code> for
    various reasons&mdash;the fix itself may be disruptive, or simply
    relatively low value.
  </div>
</div><!-- #Topic-Branches.blurbSummary -->
<div id="Actions" class="blurbSummary grid_12">
  <div class="blurbTitle">Actions</div>
  <div class="p">
    Every action which would introduce a new commit can be isolated to one of
    six actions:
    <ul>
      <li><code>git convey update</code>: brings the local repository
      up-to-date with the remote <code>origin</code>.</li>
      <li><code>git convey start &lt;task|bugfix|hotfix&gt; &lt;task
      ID&gt;</code>: used to create a new branch where changes can be
      isoloted.</li>
      <li><code>git convey commit ...</code>: used to commit changes to a topic
      branch.<span class="note">This is essentially a synonym
      for <code>git commit</code>. Developers should prefer <code>git convey
      commit</code> anyway in order to keep the habit of consistently using
      the Git-Convey tool and because future versions may want to do some
      custom house keeping at commit time.</span></li>
      <li><code>git convey finish [[&lt;task|bugfix|hotfix&gt;] &lt;task
      ID&gt;]</code>: marks the current or indicated topic branch for
      integration back into the original source branch from which it was
      cut. Note that 'finished' branches may receive further commits, such as
      may be requested by the merge master, and be re-finished any number of
      times.</li>
      <li><code>git convey promote-testing</code>: archives the
      current <code>testing</code> <code>HEAD</code> and then forces
      the <code>testing</code> <code>HEAD</code> to the
      current <code>master</code> <code>HEAD</code>.</li>
      <li><code>git convey promote-release &lt;release ID&gt;</code>: cuts a
      new release branch from the
      current <code>testing</code> <code>HEAD</code>.</li>
    </ul>
  </div>
</div><!-- #Actions.blurbSummary -->
<div id="Internal-Mechanics" class="blurbSummary grid_12" data-perspective="detailed">
  <div class="blurbTitle">Internal-Mechanics</div>
  <div class="p">
    Most of the time, users will not need to concern themselves with the
    internal mechanics of the Git-Convey extensions. Developers should
    generally have a basic understanding of what's happenning in the repo
    whenever Git-Convey commands are executed, and of course Git-Convey
    developers will need to know exactly what's going on.
  </div>
  <div class="subHeader"><span><code>update</code></span></div>
  <div class="p">
    
  </div>
  <div class="subHeader"><span><code>start</code></span></div>
  <div class="p">
  </div>
  <div class="subHeader"><span><code>commit</code></span></div>
  <div class="p">
  </div>
  <div class="subHeader"><span><code>finish</code></span></div>
  <div class="p">
  </div>
  <div class="subHeader"><span><code>promote-testing</code></span></div>
  <div class="p">
  </div>
  <div class="subHeader"><span><code>promote-release</code></span></div>
  <div class="p">
  </div>
</div><!-- #Internal-Mechanics.blurbSummary -->
