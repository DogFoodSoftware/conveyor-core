<div id="Overview" class="blurbSummary grid_12">
  <div class="p">
    <span data-lexicon-ref="/documentation/conveyor/lexicon/Conveyor-environment"><!-- We
    use this embedded/fallback syntax because the 'references' widget has not
    been developed or even specced, though the purpose should be obvious. This
    comment and embedded ref may be removed once the plugin is
    done. --><a href="/documentation/conveyor/lexicon/Conveyor-environment">Conveyor
    environments...</a></span> <a href="/documentation/conveyor/ref/Projects">Conveyor
    projects</a>, and environments are the two primary nominal concepts of
    Conveyor.
  </div>
  <div class="p">
    Under normal operations, the bulk of environmental management is handled
    automatically by the system. The majority of users need never really
    bother with this stuff, Conveyor does a good job of
    self-managing and many users may rely entirely on the automated
    systems. Businesses or power users may want to
    consider <a href="/documentation/conveyor/ref/Management_Manual">resourcing</a>
    <a href="/documentation/conveyor/ref/Operations_Manual">operational
    support</a>. The majority of the remaining information is addressed to
    operators and developers.
  </div>
</div><!-- .blurbSummary#Overview -->
<div id="Environment-Management" class="blurbSummary grid_12" data-perspective="operations">
  <div class="blurbTitle">Environment Management</div>
  <div class="p">
    Authorized users may access Conveyor environments through the
    as <a href="/conveyor-environments"><code>/conveyor-enviroment</code>
    resource</a> from within an active Conveyor enviroment and manage the
    local and foreign environments through as one would with any other
    resource through standard
    HTTP <a href="/documentation/conveyor/lexicon/service-request">service
    requests</a>. The Conveyor environment itself is also a stack component
    and host service and supports standard bash-based script management as
    well.
  </div>
  <div class="p">
    Of course, as the environment is also the primary unit of operation, the
    environment is a bit special since you have to have an active, running
    environment in order to do 'everything else'. Luckily, starting an
    environment is as easy as running
    the <code>~/playground/conveyor/bin/service-start</code> script.
  </div>
  <div class="p" data-perspective="operations">
    Under (the very thin) covers, the environment service simply passes
    through commands to the underlying host services required for the
    environment. The specific host services vary from environment to
    environment, but must, at a minumum, include a web server.
  </div>
</div><!-- .blurbSummary#Environment-Management -->
<div id="Environment-Updates" class="blurbSummary grid_12">
  <div class="blurbTitle">Environment Updates</div>
  <div class="p">
    One can view an environment as a collection of specific project versions,
    checked out, built, and running. The specific versions are specified in
    the project subscription. When an environment is updated, all services are
    temporarily shut down (making the environment inactive), the environment
    subscription is updated, any updated entries in the subscription file are
    updated, any new update scripts are run, and then all services are
    restarted.  This process can be initiated via the web service (TODO: how?)
    or via the <code>~/playground/conveyor/bin/sevice-update</code> script.
  </div>
</div><!-- .blurbSummary#Environment-Updates -->
<div id="Run-Time-Status" class="blurbSummary grid_12"
     data-perspective="operations">
  <div class="blurbTitle">Run Time Status</div>
  <div class="p">
    An environment may generally be in one of three 'readiness states':
    <ul>
      <li><code>UNAVAILABLE</code>: meaning the core web server is not running
      or web services are otherwise unavailable,</li>
      <li><code>PARTIALLY_AVAILABLE</code>: meaning core web services are
      available, but subscribed services specific to the particular
      environment may not be available,</li>
      <li><code>AVAILABLE<code>: meaning core web services and all subscribed
      services are available.</li>
    </ul>
    An <code>UNAVAILABLE</code> envorironment cannot be reached through normal
    means (REST-y HTTP web services). A <code>PARTIALLY_AVAILABLE</code>
    environment can be reached, but may not be prepared to to successfuly
    respond to all service requests. In this state, certain core service
    requests&mdash;such as requests to the
    for <code>/conveyor-environment</code> resource&mdash;should function
    properly. All other requests are safe, in the sense that
    requests<span data-prespective="detailed operations"> (in the absence of
    bugs)</span> pose no threat to system or data integrity, though a request
    may result in an HTTP <code>503 Service Unavailable</code> response.
  </div>
  <div class="p">
    An <code>AVAILABLE</code> system is one in which all projects source code is
    up-to-date with regards to the environment subscription and in which all
    project run times are built and operational. An <code>AVAILABLE</code>
    system services should<span data-perspective="detailed"> (in the absence
    of bugs)</span> match the services advertised in the subscription file.
  </div>
</div><!-- .blurbSummary#Run-Time-Status -->
<div id="Subscription-Implementation" class="blurbSummary grid_12"
     data-Perspective="implementation operations">
  <div class="blurbTitle">Subscription Implementation</div>
  <div class="subHeader"><span>Subscription Processing</span></div>
  <div class="p">
    In the 0.1 version, an environment is tied to a host. In future versions,
    environments will transcend individual hosts, supportinga and potentially
    manifesting in multi-host arrangements. For the time being, however,
    for each Conveyor environment, there is a singel host.
  </div>
  <div class="p">
    Thus, for any given environment hosted on a particular host, the
    individual project descriptions are determined as follows:
    <ul>
      <li>The configuration
      in <code>~/playground/conveyor/kdata/standard-conveyor-environment.conf</code>
      is processed.</li>
      <li>If
      present, <code>~/playground/conveyor/data/local-convyeor-environment.conf</code>
      is processed, and any values therein will override those in the standard
      Conveyor environment configuration file.
    </ul>
    The resultiing effective environment configuartion specifies specific
    versions of each project to which to subscribe to. The idea is to provide
    a standard subscription built in and ready to go, but make it easy to
    customizer or replace.
  </div>
  <div class="subHeader"><span>Subscription File Format</span></div>
  <div class="p">
    The basic subscription entry is of the form:
    <pre><code>
&lt;git URL spec&gt;#&lt;git version or branch&gt;[#&lt;local playground name&gt;]
    </code></pre>
    The format is most self-explanatory. The 'local playground name' is the
    name given directory under <code>~/playground</code> where the repo is to
    be cloned. Understanding the use of version vs. branch references is
    critically important and discussed specifically
    in <a href="#Organizing-Subscriptions">it's own section</a>.
  </div>
  <div class="p">
    The effective subscriptions are determining by first reading te
    subscriptions from the standard subscriptions and then processing the
    subscriptions in the local subscription file, if any. Entries are
    organized by local repo name, and any entry in the local file resolving to
    the same name will override the value defined in the standard
    subscriptions.
  </div>
  <div class="p">
    The subscriptions are members of an array
    named <code>$SUBSCRIPTIONS</code>. In order to reset the standard
    subscriptions (rather than augment and override), simply add the line:
    <pre><code>
unset $SUBSCRIPTIONS
    </code></pre>
    Then, re-initialize the <code>$SUBSCRIPTIONS</code> array with whatever
    you like.
  </div>
  <div class="p">
    The global options modify behavior and set useful defaults. The file is
    interpretted with standard bash variable support, so you are free to
    create and use bash variables (like <code>$THIS</code>) freely within the
    file. The most common use is to improve readability of long and commonly
    used git repo names.
  </div>
  <div class="p">
    Files may define a number of special variables. The script is effectively
    processed line by line, and so some variables must appear at the top of
    the file. The suggested outline o the file is special global configuration
    variables, followed by script specific convenience variables, followed by
    the subscription entries.
  </div>
  <div class="p">
    The special global configuration variables are:
    <ul>
      <li><code>$DEFAULT_REPO</code>: an alias defined in the standard
      Conveyor subscription. Currently points to the Dog Food Software GitHub
      repos.</li>
      <li><code>$SUBSCRIPTIONS</code>: the array of subscription entries,
      discussed above.</li>
      <li><code>$OVERRIDE_VERSION_REF</code>: if set, this value is used in
      place for all version/branch references unless itself overriden by a
      repo specific override. It is used primarily to save
      the trouble of overwritting or rewriting all the subscriptions in
      development and testing branches.</li>
      <li><code>$OVERRIDE_&lt;local repo name&gt;_VERSION_REF</code>: if set,
      this value is used in place of the versio/branch ref specified in the
      effective subscription.</li>
    </ul>
  </div>
  <div class="p">
    It is possible to break up the local configuration into sub-files and
    import third party subscriptions using the <code>source</code>
    command.<span class="note">Those who know bash may be aware that
    '<code>.</code>' is an alias for '<code>source</code>'. We explicitly
    don't want to keep subscription files approachable and easy to understand,
    so though it would function fine in the current implementation, the use of
    the period alias for <code>source</code> is forbidden.</span> To do so,
    simply add '<code>source &lt;file path&gt;</code>' at the appropriate spot
    and it will be as if the contents of the source file were placed verbatim
    at that point in the sourcing file.
  </div>
</div><!-- .blurbSummary#Subscription-Implementation --
	-- [data-Perspective="implementation operations"] -->
<div id="Organizing-Subscriptions" class="blurbSummary grid_12"
     data-Perspective="implementation operations">
  <div class="blurbTitle">Organizing Subscriptions</div>
  <div class="p">
  </div>
</div><!-- .blurbSummary#Organizing-Subscriptions [data-Perspective="implementation operations"] -->
<div id="Minimal-Packaging" class="blurbSummary grid_12"
     data-Perspective="detailed implementation operations">
  <div class="blurbTitle">Minimal Packaging</div>
  <div class="p">
    A Conveyor environment is at any one point in time, conceptually the
    composition of project snapshots. We implement this idea very directly by
    implementing subscriptions as nothing more than a git
    URL.<span data-perspective="detailed"> Though it hasn't been implement in
    with the standard implementation, the design is meant to add support for
    any versioning system supporting URLs and specific snapshots and/or
    branches could be quickly implemented.
  </div>
  <div class="p">
    However, we intentionally want to push this idea of using plain old git,
    combined with specific branch management and deployment strategies. With a
    few small tweaks, we can cover all the features we need with nothing but
    standard git. It's not something that will surface for most users, but
    the technical or curious, the good news and a nice feature about Conveyor
    is that you can really manage your deployments quite effectively, with the
    ability to roll back, isolate changes for testing, and ensure auditable
    processes all by just using git&mdash;which isn't the simplest application
    in the world, but is just about no more complex than really necessary.
  </div>
</div><!-- .blurbSummary#Organizing-Subscriptions [data-Perspective="implementation operations"] -->
