<div id="Overview" class="blurbSummary grid_12">
  <div class="p">
    Here's the basic idea: <code>plans</code> tell us how to both react to
    input and move forward towards goals. 
    <code>Plan</code> <code>instructions</code> (non-exclusively)
    generate <code>tasks</code>. The <code>task</code> is a unit of work which
    produces definite results which the, for which the system can
    check. Satisfying a <code>task</code> involves changes to the system,
    which trigger new <code>instructions</code>, and so on and so on.
  </div>
</div><!-- .blurbSummary#Overview -->
<div id="Example-Task-Sequence" class="blurbSummary grid_12">
  <div class="blurbTitle">Example Task Sequence</div>
  <div class="p">
    When you create
    an <code>ecosystem</code>, <span data-perspective="!detailed">it should
    come pre-loaded with some initial
    setup <code>tasks</code>.</span><span data-perspective="detailed">you will
    select a template ecosystem to copy. Ideally, the cloned ecosystem will
    include initial <code>tasks</code> related to completing or at least
    confirming the
    ecosystem.</span> <span data-perspective="implementation">Recall the
    initial data is read from
    the <code>&lt;projects&gt;/kdata/initial/&lt;resources&gt;</code>
    directory.</span>
    The <code>/users/initial</code><span data-perspective="!detailed"> is
    normally </span><span data-perspective="detailed">'s configuration option
    <code>tasks.auto-stream</code> is set <code>true</code>, which&mdash;among
    other things&mdash;</span>sends the user straight to their first task: to
    name the
    ecosystem<span data-perspective="!implementation">.</span><span data-perspective="implementation">&mdash;
    which might be defined as:
    <pre><code>
{ "self_URL" : : "/tasks/_setup-001-get-ecosystem-name",
  "satisfied_by" : "/simple-question/_setup-001-get-ecosystem-name",
  "check_URL" : "/ecosystem/?fields=name",
  "check_condition" : "name",
  "assigned_to" : "/users/initial",
  "status" : "pending",
  "value" : "HIGH",
  "manual_order" : 1,
  "pass_status" : "closed" }
    </code></pre>
    The ecosystem itself is referenced through the
    special <code>/ecosystem</code> resource, and the initial
    user <span data-perspective="detailed">(responsible for further setup and
    customization) </span>is referenced by <code>/users/initial</code>.
    </span>
  </div>
  <div class="p">
    The task is satisfied by a <code>simple-question</code> which, once
    answered, triggers an update to the <code>/ecosystem</code> 'name'
    field. This in turn causes the <code>task</code>'s self-check to pass,
    which 'closes' the <code>task</code>. The user then moves onto the
    next <code>task</code> until they exit the 'process task' loop or complete
    the system setup.<span data-perspective="detailed implementation
    operations"> Refer
    to <a href="/documentation/conveyor/ref/Ecosystem#Setup-Tasks">Ecosystem
    setup tasks section</a> for information and best practices regarding
    ecosystem setup.</span>
  </div>
</div><!-- #Example-Task-Sequence.blurbSummary -->
<div id="Instructions" class="blurbSummary grid_12">
  <div class="blurbTitle">Instructions</div>
  <div class="p">
    <code>Instructions</code> are triggered by system
    state. Our <a href="Example-Task-Sequence">example task above</a> would
    have been created by an <code>instruction</code> triggered by an empty
    ecosystem name
    field<span data-perspective="!implementation">.</span><span data-perspective="implementation">
    such as this:
    <pre><code>
{ "self_URL" : : "/instruction/_ll-smb-template-ensure-ecosystem-name",
  "trigger_URL" : "/ecosystem/?fields=name",
  "check_condition" : "name == null || name.isEmpty()",
  "auto_assign" : true,
  "task" : {
              "self_URL" : : "/tasks/_setup-001-get-ecosystem-name",
              "satisfied_by" : "/simple-question/_setup-001-get-ecosystem-name",
              "check_URL" : "/ecosystem/?fields=name",
              "check_condition" : "name",
              "value" : "HIGH",
              "manual_order" : 1,
              "pass_status" : "closed"
           }
}
    </code></pre></span>
  </div>
  <div class="p">
    Notice that the <code>instruction</code> and the <code>task</code> it
    creates are symetric. The <code>instruction</code> is triggered by the
    empty name, and the <code>task</code> is satisfied by a non-empty
    name.<span data-perspective="future"> In the current implementation, this
    relationship may be expressed, but is not technically necessary. In future
    versions, we may modify the design such that <code>task</code>
    satisfaction is essentially tied to the <code>instruction</code>
    trigger.</span> This is generally how the system is designed to work. A
    situation is "noticed" by an <code>instruction</code>, which generates
    the <code>task</code> to remedy or advance the state.
  </div>
  <div class="subHeader"><span><code>Instructions</code> are Single Minded</span></div>
  <div class="p">
    <code>Instructions</code> are intended to implement human scale process
    logic. It is not a general purpose bus or extension point. The limitations
    on how <code>instructions</code> are entirely intentional because
    developing a <code>plan</code> is complex, so we wanted to keep
    the <code>instructions</code> themselves as simple as possible.
  </div>
  <div class="p">
    Note that of course one could conceive of implementing new features or
    adding technical capabilities using <code>instructions</code>; it's
    certainly possible; we're just saying don't do it. If there's need, we may
    look at pulling out some of the logic into a lower level library, so that
    other resources can easily adapt their own version
    of <code>instruction</code> processing semantics, or
    use <code>instructions</code> as a model for a similar system, or
    whatever. The point is, please don't abuse <code>instructions</code>, we
    want to keep it simple.
  </div>
  <div class="subHeader"><span><code>Instructions</code> are Reactionary</span></div>
  <div class="p">
    Instructions are executed after a valid change in state. A call that
    results in a FORBIDDEN or fails due to server error will never directly
    trigger an <code>instruction</code> because these calls cannot result in
    valid state changes.<span class="note">The term 'valid state change' is
    used here to mean a change it data&mdash;or state&mdash;which is 'valid as
    designed'. Neither FORBIDDEN nor failed requests should never result in
    state change; because of bugs or hardware failures, they may of course
    result in state change, but there's nothing we can do about that and we do
    our best to ignore it. Note there is one exception where rejected and
    failed calls may trigger instructions: the logs themselves may be surfaced
    as a resource, and <code>instructions</code> would be written about the
    logs. This is why we say 'never result in <em>direct</em> change', as we
    consider the case mentioned here to be very much indirect.</span>
  </div>
  <div class="subHeader"><span><code>Instructions</code> are Serial</span></div>
  <div class="p">
    
  </div>



    Each <code>instruction</code> remembers whatever is important about the
    universe, and is able to react to changes at any point. When a resource
    changes,<span class="note">Recall that when any item within a resource
    changes, the resource is said to change as well.</span> we proactively
    ping all known instructions associated with the
    resource.<span class="note">These are the instructions tracked in the
    resource item itself, with <code>resources</code> tracked
    as <code>resource</code> items
    (including <code>/resources/resources</code>).</span> However, these
    alerts may fail or be incomplete, which is fine, because the instruction
    is able to tell at any point whether the resource has changed. The item
    will actually be locked against further changes until
    requried <code>instructions</code> are
    executed. Thus, the actual decision is always lazy, and asynchronous,
    though we can initiate the lazy check with a poke.

    Each <code>instruction</code> is like a page in that. Writing a good plan
    is very much like writing a good
    story.<span class="note">The <code>plan</code> is not the story itself,
    but rather describes many potential stories.</span>
    </div>
  </div>
</div><!-- #Instructions.blurbSummary -->
<div id="Planning" class="blurbSummary grid_12">
  <div class="blurbTitle">Planning</div>
  <div class="p">
    <code>Instructions</code> are the end product of planning out and
    capturing institution process and knowledge. Looking at all
    the <code>instructions</code> and considering all the
    potential <code>tasks</code> in a full blown <code>plan</code> can be
    daunting.
  </div>
  <div class="subHeader"><span>User Stories</span></div>
  <div class="p">
    Each <code>instruction</code> <em>should</em> document it's semantic
    purpose and ground itself fully it's it's own raison d'Ãªtre, which should
    most often ground itself in a user story. This should not be taken to mean
    that a formal user story must procede creation of an instruction, but
    rather that mature <code>instructions</code> are expected to be able to
    explain themselves.
  </div>
  <div class="p">
    For larger projects, a more formal connection between instructions and
    user stories may be useful. Though the relation may not be 1-1, user
    stories are a useful lens for understanding, implementing, and
    verifying <code>instructions</code>.
  </div>






  </div>
  <div class="p">
    The story is an ongoing series of tasks. 
  </div>
</div><!-- #Life-of-a-Task.blurbSummary -->

  <div class="p">
    As configured, the user will go
  </div>
  
    
      <li>{ "self URL" : "/tasks/_setup-001-size-business"
            "satisfied by" : "/

Task <code>_setup-01-size</code> might 
      <li>If the user has cloned a business ecosystem template, then one of the
      pre-existing tasks is likely to be something satisfied
      by <code>/books/?field=total-count > 0</code>.</li>
      <li>The task is assigned to the initia

    Let's look at a few examples:

    Base Level Audits
    - trigger: 15th day of quarter
    - result: creates new task to manually audit that all books have a
    quarterly audit instruction scheduled

    Setup Accounting
    - trigger event: PUT /books
    - result: creates new task to create all new accounts

    - trigger event: PUT /books
    - result: creates new instruction to review /books/{new ID} in one
    quarter-annual.*(The DELETE action automatically clears any instructions
    bound to the item. Asynchronous instructions should delete themselves when
    'Item not found or deleted' is returned.)

     - trigger event: put /accounts
     - result: create task to verify required information positively attested
     by qualified operator.

     NOTE: I think we can get rid of the 'task chain' above. Maybe we talk
     about general 'user case' narratives as a good starting point for task
     implementation.



<div id="Instructions" class="blurbSummary grid_12">
  <div class="blurbTitle">Instructions</div>
  <div class="p">
    An <code>/instructions</code> item encodes a 
  </div>

Break out trigger talk. Trigger is matched by call URL and call results. An
  instruction may have multilpe triggers.

  <div class="p">
    <ul>
      <li>The instruction triggers:
	<ul>
	  <li>Trigger resource URL.</li>
	  <li>Trigger HTTP method.</li>
	  <li>(FUTURE) For collection POST and DELETE, collection, summary
	  field values are provided.</li>
	  <li>(FUTURE) For collection GET,POST, or DELETE include
	  standard search mask and set comparison function.</li>
	  <li>(FUTURE) For collection POST triggering field name set
	  and set comparison function.</li>
	  <li>For an item resource POST triggering field names and set comparison
	  function.</li>
	  <li>The resource URL to which we react.</li>
	  <li>The HTTP method.</li>
	</ul>
    </ul>
	The set comparison functions are: DISJOINT, UNION, EQUAL, SUBSET,
	SUPERSET.
  </div>
</div><!-- #Instructions.blurbSummary -->
<div id="Organizing-Subscriptions" class="blurbSummary grid_12"
     data-Perspective="implementation operations">
  <div class="blurbTitle">Organizing Subscriptions</div>
  <div class="p">
  </div>
</div><!-- .blurbSummary#Organizing-Subscriptions [data-Perspective="implementation operations"] -->
<div id="Minimal-Packaging" class="blurbSummary grid_12"
     data-Perspective="detailed implementation operations">
  <div class="blurbTitle">Minimal Packaging</div>
  <div class="p">
    A Conveyor environment is at any one point in time, conceptually the
    composition of project snapshots. We implement this idea very directly by
    implementing subscriptions as nothing more than a git
    URL.<span data-perspective="detailed"> Though it hasn't been implement in
    with the standard implementation, the design is meant to add support for
    any versioning system supporting URLs and specific snapshots and/or
    branches could be quickly implemented.
  </div>
  <div class="p">
    However, we intentionally want to push this idea of using plain old git,
    combined with specific branch management and deployment strategies. With a
    few small tweaks, we can cover all the features we need with nothing but
    standard git. It's not something that will surface for most users, but
    the technical or curious, the good news and a nice feature about Conveyor
    is that you can really manage your deployments quite effectively, with the
    ability to roll back, isolate changes for testing, and ensure auditable
    processes all by just using git&mdash;which isn't the simplest application
    in the world, but is just about no more complex than really necessary.
  </div>
</div><!-- .blurbSummary#Organizing-Subscriptions [data-Perspective="implementation operations"] -->
