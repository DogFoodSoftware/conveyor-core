<div id="Overview" class="blurbSummary grid_12">
  <div class="p">
    A <code>task</code> is a unit of work which produces definite and potentially
    actionable results. A 'task plan', or just 'plan', is the logic which (in
    part) drives task creation. The plan is the driver of any project and
    represents the concrete knowledge of an ecosystem.
  </div>
</div><!-- .blurbSummary#Overview -->
<div id="Life-of-a-Task" class="blurbSummary grid_12">
  <div class="blurbTitle">Life of a Task</div>
  <div class="p">
    Looking at all the <code>instructions</code> in a full
    blown <code>plan</code> can be daunting and we usually deal with plaans by
    zooming in on a particular area, or even just a single interaction. You
    can think of the <code>plan</code> as one of
    those <a href="http://en.wikipedia.org/wiki/Choose_Your_Own_Adventure">Choose
    Your Own Adventure</a> books.<span class="note">Zane wonders if these
    books taught him coding. Probably not, but good myth.</span> It's
    interesting, because it represents not a single story, but many potential
    stories. In the same way, a <code>plan</code> lays out the kind of things
    a project may do.


Plan cluster: divide plans by project. An ecosystem is created by selecting a
    number of base level projects, sufficient to keep things self
    contained. Base projects are those which rely only base resources. (They
    may define additional resources.)

Ecosystem map shows 1-degree from each resource...

    Each instruction refers to a 'this' which is some 'thing', either
    a <code>resource</code> or a <code>resource</code>
    item. E.g., <code>/tasks<code> or a <code>task</code>. In any
    case, <code>instructions</code> always deal with a thing. The instruction
    is matched by the thing and method: GET, PUT, POST, and DELETE, optional
    system telemetry, and&mdash;for GET and POST&mdash;the before and after
    data snapshots.

    Critically instructions are always executed after the operation
    itself.<span class="note">We considered allowing pre-action instructions a
    well, inline with the <a href="http://spring.io">Spring</a> framework's
    'veto' methods. However, we decided that <code>plans</code> are going to
    be complicated enough if they just focus on defining operational process
    flow, for which post-action processing is sufficient. Pre-processing would
    allow us to take care of technical concerns
    with <code>instructions</code>, and thereby
    complicate <code>instructions</code> with technical ideas.</span> It is
    possible that a change in system state occurs, but the follow
    on <code>instructions</code> matching that change are not executed for
    whatever reason.

    For this reason, an <code>instruction</code> may implement 'double check'
    logic. For instance, there may be an instruction triggered
    when the special resource <code>/time</code> is updated with a value of
    midnight, first of the month. I.e., a monthly instruction. This will
    generate a <code>task</code>. If the instruction fails,
    the <code>task</code> won't be created. If we ask
    the <code>instruction</code> to check itself at a minute past midnight, it
    can tell that there absolutely should be a <code>task</code>, and so if
    there isn't it may go ahead and create one now. This logic can specify
    automatic remediation, or request authorization from user, or even
    generate a task for resolution.


    Each <code>instruction</code> is like a page in that. Writing a good plan
    is very much like writing a good
    story.<span class="note">The <code>plan</code> is not the story itself,
    but rather describes many potential stories.</span>
  </div>
  <div class="p">
    The story is an ongoing series of tasks. 
  </div>
</div><!-- #Life-of-a-Task.blurbSummary -->


<div id="Instructions" class="blurbSummary grid_12">
  <div class="blurbTitle">Instructions</div>
  <div class="p">
    An <code>/instructions</code> item encodes a 
  </div>
</div><!-- #Instructions.blurbSummary -->
<div id="Organizing-Subscriptions" class="blurbSummary grid_12"
     data-Perspective="implementation operations">
  <div class="blurbTitle">Organizing Subscriptions</div>
  <div class="p">
  </div>
</div><!-- .blurbSummary#Organizing-Subscriptions [data-Perspective="implementation operations"] -->
<div id="Minimal-Packaging" class="blurbSummary grid_12"
     data-Perspective="detailed implementation operations">
  <div class="blurbTitle">Minimal Packaging</div>
  <div class="p">
    A Conveyor environment is at any one point in time, conceptually the
    composition of project snapshots. We implement this idea very directly by
    implementing subscriptions as nothing more than a git
    URL.<span data-perspective="detailed"> Though it hasn't been implement in
    with the standard implementation, the design is meant to add support for
    any versioning system supporting URLs and specific snapshots and/or
    branches could be quickly implemented.
  </div>
  <div class="p">
    However, we intentionally want to push this idea of using plain old git,
    combined with specific branch management and deployment strategies. With a
    few small tweaks, we can cover all the features we need with nothing but
    standard git. It's not something that will surface for most users, but
    the technical or curious, the good news and a nice feature about Conveyor
    is that you can really manage your deployments quite effectively, with the
    ability to roll back, isolate changes for testing, and ensure auditable
    processes all by just using git&mdash;which isn't the simplest application
    in the world, but is just about no more complex than really necessary.
  </div>
</div><!-- .blurbSummary#Organizing-Subscriptions [data-Perspective="implementation operations"] -->
