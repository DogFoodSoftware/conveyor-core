<div id="Overview" class="blurbSummary grid_12">
  <div class="p">
    Conveyor defines a standard branching strategy intended to move features
    from initial implementation towards release. The strategy is implemented
    by the <a href="TODO">Git-Convey</a> git extension, and for day-to-day
    usage, most developers can and should work entirely within the Git-Convey
    tool.
  </div>
  <div data-perspective="future" class="p">
    In future Conveyor versions, the developer will interact through the
    task interface to create and manage branches and many of these details
    will hidden in the day-to-day interactions. Basic Conveyor assessments
    will still cover the branching strategy, which developers should
    understand.
  </div>
</div><!-- #Overview.blurbSummary -->
<div id="Permanent-Branches" class="blurbSummary grid_12">
  <div class="blurbTitle">Permanent Branches</div>
  <div class="p">
    There are two permanent branches: <code>master</code>
    and <code>testing</code>. The
    <code>master</code> branch represents the latest collective best effort by
    development. The <code>master</code> branch <em>should</em> always be
    runnable and pass all extant tests. In practice, people make mistakes and
    at any given point in time <code>master</code> may contain errors,
    especially as relates to new features.
  </div>
  <div class="p">
    Enter <code>testing</code>. This is where code goes to mature. At the
    beginning of the <a href="#Release-Cycle">release cycle</a>, the
    accumulated changes on <code>master</code> are promoted
    to <code>testing</code>, where the focus is exclusively on stabilization
    and bug fixes.
  </div>
</div><!-- #Permanent-Branches.blurbSummary -->
<div id="Release-Branches" class="blurbSummary grid_12">
  <div class="blurbTitle">Release Branches</div>
  <div class="p">
    At the end of the <a href="#Release-Cycle">release cycle</a>, the
    stabalized, relatively bug-free code on <code>testing</code> is promoted
    to a <code>release-*</code> branch. Release branches are where 'production
    ready' code lives. The release branches are long lived&mdash;even
    indefinitely so&mdash;but not permanent in that each release may be
    sunsetted someday. Many release branches have a built in sunset dates.
  </div>
</div><!-- #Release-Branches.blurbSummary -->
<div id="Release-Cycle" class="blurbSummary grid_12">
  <div class="blurbTitle">Release Cycle</div>
  <div class="p">
    The branching strategy is integrated with a concrete release cycle which
    envisions the regular flow of new features from <code>master</code>
    to <code>testing</code> to <code>release-*</code> branches. A release
    cycle is said to begin when the accumulated updates on <code>master</code>
    are promoted to <code>testing</code> and end when
    the <code>release-*</code> branch is cut from <code>testing</code>.
  </div>
</div><!-- #Release-Cycle.blurbSummary -->
<div id="Task-Branches" class="blurbSummary grid_12">
  <div class="blurbTitle">Task Branches</div>
  <div class="p">
    Every change in the system is first introduced in a task branch. There are
    three variations:
    <ul>
      <li><code>task-*</code> branches are cut from <code>master</code> and
      are most typically associated with new features.</li>
      <li><code>bugfix-*</code> branches are cut from <code>testing</code> and
      always represent bug fixes.<span class="note">Very rarely, new features
      may be introduced on testing when they are deemed absolutely
      necessary. These are still considered 'bug fixes' as we assume that the
      feature is necessary to meet specifications or requirements, and the
      fact that the feature is missing is itself a bug. The main point is
      that the task branch name is entirely determined by the source branch </span></li>
    </ul>

    , each with a specific prefix and associated
    to <code>master</code>, <code>testing</code>, or a <code>release-*</code>
    branch.
  </div>
  <div class="p">
    There are three task branch variations. Each variation is named with a
    particular prefix and associated to . The first
    two, <code>feature-*</code> and <code>task-*</code> are always cut
    from <code>master</code> and represent new work. As far as Conveyor is
    concerned, these two branch types serve an identical purpose.
  </div>
</div><!-- #Task-Branches.blurbSummary -->
