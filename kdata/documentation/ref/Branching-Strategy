<div id="Overview" class="blurbSummary grid_12">
  <div class="p">
    Conveyor defines a standard branching strategy intended to move features
    from initial implementation towards release. The strategy is implemented
    by the <a href="TODO">Git-Convey</a> git extension, and for day-to-day
    usage, most developers can and should work entirely within the Git-Convey
    tool.
  </div>
  <div data-perspective="future" class="p">
    In future Conveyor versions, the developer will interact through the
    task interface to create and manage branches and many of these details
    will hidden in the day-to-day interactions. Basic Conveyor assessments
    will still cover the branching strategy, which developers should
    understand.
  </div>
</div><!-- #Overview.blurbSummary -->
<div id="Permanent-Branches" class="blurbSummary grid_12">
  <div class="blurbTitle">Permanent Branches</div>
  <div class="p">
    There are two permanent branches: <code>master</code>
    and <code>testing</code>. The
    <code>master</code> branch represents the latest collective best effort by
    development. The <code>master</code> branch <em>should</em> always be
    runnable and pass all extant tests. In practice, people make mistakes and
    at any given point in time <code>master</code> may contain errors,
    especially as relates to new features.
  </div>
  <div class="p">
    Enter <code>testing</code>. This is where code goes to mature. At the
    beginning of the <a href="#Release-Cycle">release cycle</a>, the
    accumulated changes on <code>master</code> are promoted
    to <code>testing</code>, where the focus is exclusively on stabilization
    and bug fixes.
  </div>
</div><!-- #Permanent-Branches.blurbSummary -->
<div id="Release-Branches" class="blurbSummary grid_12">
  <div class="blurbTitle">Release Branches</div>
  <div class="p">
    At the end of the <a href="#Release-Cycle">release cycle</a>, the
    stabalized, relatively bug-free code on <code>testing</code> is promoted
    to a <code>release-*</code> branch. Release branches are where 'production
    ready' code lives. The release branches are long lived&mdash;even
    indefinitely so&mdash;but not permanent in that each release may be
    sunsetted someday. Many release branches have a built in sunset dates.
  </div>
</div><!-- #Release-Branches.blurbSummary -->
<div id="Release-Cycle" class="blurbSummary grid_12">
  <div class="blurbTitle">Release Cycle</div>
  <div class="p">
    The branching strategy is integrated with a concrete release cycle which
    envisions the regular flow of new features from <code>master</code>
    to <code>testing</code> to <code>release-*</code> branches. A release
    cycle is said to begin when the accumulated updates on <code>master</code>
    are promoted to <code>testing</code> and end when
    the <code>release-*</code> branch is cut from <code>testing</code>.
  </div>
  <div class="p">
    Within this framework, projects are free to define their own release
    schedule and strategy. Some projects may release at certain milestones,
    others may release on a periodic schedule.
  </div>
</div><!-- #Release-Cycle.blurbSummary -->
<div id="Task-Branches" class="blurbSummary grid_12">
  <div class="blurbTitle">Task Branches</div>
  <div class="p">
    Every change in the system is first introduced in a task branch. There are
    three variations:
    <ul>
      <li><code>task-*</code> branches are cut from <code>master</code> and
      are most typically associated with new features.</li>
      <li><code>bugfix-*</code> branches are cut from <code>testing</code> and
      always represent bug fixes.</li>
      <li><code>hotfix-*</code> branches are cut from a <code>release-*</code>
      branch and alays represent bug fixes.</li>
    </ul>
    To be clear, these are three variations of task
    branches. A <code>task-*</code> branch is (hopefully) the most common by
    far.
  </div>
  <div class="p">
    Note that the task branch prefix is determined by the source branch and
    not by the purpose per-se. Bugs may be fixed on <code>master</code> for
    various reasons&mdash;the fix itself may be disruptive, or simply
    relatively low value. Such changes would still be isolated on
    a <code>task-*</code> branch.
  </div>
</div><!-- #Task-Branches.blurbSummary -->
<div id="Mechanics-and-Actions" class="blurbSummary grid_12">
  <div class="blurbTitle">Mechanics and Actions</div>
  <div class="p">
    Every action which would introduce a new commit can be isolated to one of
    six actions:
    <ul>
      <li><code>git convey update</code>: brings the local repository
      up-to-date with the remote <code>origin</code>.</li>
      <li><code>git convey start &lt;task|bugfix|hotfix&gt; &lt;task
      ID&gt;</code>: used to create a new branch where changes can be
      isoloted.</li>
      <li><code>git convey commit ...</code>: used to commit changes to a task
      branch.<span class="note">This is essentially a synonym
      for <code>git commit</code>. Developers should prefer <code>git convey
      commit</code> anyway in order to keep the habit of consistently using
      the Git-Convey tool and because future versions may want to do some
      custom house keeping at commit time.</span></li>
      <li><code>git convey finish [[&lt;task|bugfix|hotfix&gt;] &lt;task
      ID&gt;]</code>: marks the current or indicated task branch for
      integration back into the original source branch from which it was
      cut.</li>
      <li><code>git convey promote-testing</code>: archives the
      current <code>testing</code> <code>HEAD</code> and then forces
      the <code>testing</code> <code>HEAD</code> to the
      current <code>master</code> <code>HEAD</code>.</li>
      <li><code>git convey promote-release &lt;release ID&gt;</code>: cuts a
      new release branch from the
      current <code>testing</code> <code>HEAD</code>.</li>
    </ul>
  </div>
</div><!-- #Mechanics-and-Actions.blurbSummary -->
