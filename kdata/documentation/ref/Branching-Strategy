<div id="Overview" class="blurbSummary grid_12">
  <div class="p">
    <div class="alpha grid_4">    
      <em>Developers</em>:
      <ol>
	<li>Checkout a topic.</li>
	<li>Commit changes to the topic.</li>
	<li>Submit the changes to the topic.</li>
      </ol>
    </div><!-- developers blurb -->
    <div class="alpha grid_4">    
      <em>Merge Masters</em>:
      <ol>
	<li>Review submitted changes on a topic.</li>
	<li>Accept or decline the changes.</li>
	</ol>
      </div>
    </div><!-- merge masters blurb -->
    <div class="alpha grid_4">
      <em>Operations</em>:
      <ol>
	<li>Start a release cycle.</li>
	<li>Publish a release candidate.</li>
	<li>Select a release (for runtime).</li>
      </ol>
    </div><!-- operations blurb --> 
    <div class="clear"></div>
    That's it. git-convey aims to make good version management as simple as
    possible.
  <div data-perspective="future" class="p">
    In future Conveyor versions, the developer will interact through the task
    interface to create and manage branches. The GUI interface will be 1-1
    mapping from the CLI, with some nice vizualitations added in. We have also
    designed this interface to map 1-1 into a RESTful interface, using the
    same resources and mapping the domain specific verbs into standard
    REST-CRUD.
  </div>
</div><!-- #Overview.blurbSummary -->
<div id="Release-Cycle" class="blurbSummary grid_12">
  <div class="blurbTitle">Release Cycle</div>
  <div class="p">
    The git-convey tool directly implements an underlying release cycle.
    Understanding this release cycle is perhaps the easiest way to understand
    the branch strategy.
  </div>
  <div class="p">
    All changes begin<span data-perspective="detailed">&mdash;by
    default&mdash;</span> on the <code>master</code>
    branch. New features, refactorings, and non-critical bug fixes begin and
    then return to the <code>master</code>
    branch.<span data-perspective="detailed"> This default
    branch will, as far as git-convey is concerned, maintain a strictly
    contiguous commit history through all time. In this sense, it is the
    only conceptually permanent branch in the repository and will be referred
    to as the 'permanent branch' to avoid confusion in cases where it goes by
    a namer other than the default <code>master</code> branch.
  </div>
  <div class="p" data-perspective="detailed">
    That is, by default the <code>master</code> branch is the target of new
    development. The default branch may be changed in order to maintain
    compatibility with strategies which use <code>master</code> as the release
    branch when it is not possible to reconfigure the other strategy.
  </div>
  <div class="p">
    When appropriate, a <code>testing-*</code> branch is cut from the
    <code data-perspective="!detailed">master</code><span data-perspective="detailed">permanent</span>
    branch. This is said to start the release. QA targets the testing branches
    and developers submit only bugfixes or critical features.
  </div>
  <div class="p">
    Once the green light is given, a testing branch is promoted to
    a <code>release-*</code> branch and environment tags are
    updated. Production environments key of the environment tags, and
    developers interact with release branches only for the rare hotfix.
  </div>

  <div class="p">
    This release process naturally fits with projects, which initially have no
    testing or release branches, existing simple projects, which may maintain
    a single release and zero or one testing branches, or complex projects
    with multiple supported versions. It may also be combined with date-driven
    and milestone driven release schedules.
  </div>
</div><!-- #Release-Cycle.blurbSummary -->


<div id="Topics" class="blurbSummary grid_12">
  <div class="blurbTitle">Topics</div>
  <div class="p">
    
  </div>
</div><!-- #Topics.blurbSummary -->

<div id="Topic-Branches" class="blurbSummary grid_12">
  <div class="blurbTitle">Topic Branches</div>
  <div class="p">
    Every change in the system is first introduced in a topic branch. There are
    three variations:
    <ul>
      <li><code>task-*</code> branches are cut from <code>master</code> and
      are most typically associated with new features, refactors, and
      non-critical bug fixes.</li>
      <li><code>bugfix-*</code> branches are cut from <code>testing</code> and
      always represent bug fixes.</li>
      <li><code>hotfix-*</code> branches are cut from a <code>release-*</code>
      branch and alays represent bug fixes.</li>
    </ul>
  </div>
  <div class="p">
    Note that the topic branch prefix is determined by the source branch and
    not by the purpose per-se. Bugs may be fixed on <code>master</code> for
    various reasons&mdash;the fix itself may be disruptive, or simply
    relatively low value.
  </div>
</div><!-- #Topic-Branches.blurbSummary -->
<div id="Actions" class="blurbSummary grid_12">
  <div class="blurbTitle">Actions</div>
  <div class="p">
    Every action which would introduce a new commit can be isolated to one of
    six actions:
    <ul>
      <li><code>git convey update</code>: brings the local repository
      up-to-date with the remote <code>origin</code>.</li>
      <li><code>git convey start &lt;task|bugfix|hotfix&gt; &lt;task
      ID&gt;</code>: used to create a new branch where changes can be
      isoloted.</li>
      <li><code>git convey commit ...</code>: used to commit changes to a topic
      branch.<span class="note">This is essentially a synonym
      for <code>git commit</code>. Developers should prefer <code>git convey
      commit</code> anyway in order to keep the habit of consistently using
      the Git-Convey tool and because future versions may want to do some
      custom house keeping at commit time.</span></li>
      <li><code>git convey finish [[&lt;task|bugfix|hotfix&gt;] &lt;task
      ID&gt;]</code>: marks the current or indicated topic branch for
      integration back into the original source branch from which it was
      cut. Note that 'finished' branches may receive further commits, such as
      may be requested by the merge master, and be re-finished any number of
      times.</li>
      <li><code>git convey promote-testing</code>: archives the
      current <code>testing</code> <code>HEAD</code> and then forces
      the <code>testing</code> <code>HEAD</code> to the
      current <code>master</code> <code>HEAD</code>.</li>
      <li><code>git convey promote-release &lt;release ID&gt;</code>: cuts a
      new release branch from the
      current <code>testing</code> <code>HEAD</code>.</li>
    </ul>
  </div>
</div><!-- #Actions.blurbSummary -->
<div id="Internal-Mechanics" class="blurbSummary grid_12" data-perspective="detailed">
  <div class="blurbTitle">Internal-Mechanics</div>
  <div class="p">
    Most of the time, users will not need to concern themselves with the
    internal mechanics of the Git-Convey extensions. Developers should
    generally have a basic understanding of what's happenning in the repo
    whenever Git-Convey commands are executed, and of course Git-Convey
    developers will need to know exactly what's going on.
  </div>
  <div class="subHeader"><span><code>update</code></span></div>
  <div class="p">
    
  </div>
  <div class="subHeader"><span><code>start</code></span></div>
  <div class="p">
  </div>
  <div class="subHeader"><span><code>commit</code></span></div>
  <div class="p">
  </div>
  <div class="subHeader"><span><code>finish</code></span></div>
  <div class="p">
  </div>
  <div class="subHeader"><span><code>promote-testing</code></span></div>
  <div class="p">
  </div>
  <div class="subHeader"><span><code>promote-release</code></span></div>
  <div class="p">
  </div>
</div><!-- #Internal-Mechanics.blurbSummary -->
