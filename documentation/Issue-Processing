<section id="Overview">
  <div class="p">
    Issues are processed according to:
    <ul>
      <li>availability,</li>
      <li>skill set, and</li>
      <li>sprint.</li>
    </ul>
    This allows an individual worker to quickly see those issues which need
    their skillset, are available to be worked, ordered by their assigned
    sprints.  Issue planners line up issue for consumption by workers in such
    a way as to efficiently move the project towards a completed final
    product.
  </div>
</section><!-- #Overview -->
<section id="Management-Tools">
  <h1>Management Tools</h1>
  <div class="p">
    While the process itself has been written be laregly tool agnostic, we do
    recommend a particular tool set for green field development. Those wishing
    to adapt the process to an alternate tool chain may wish to take note of
    the recommended tool set implementation.
  </div>
  <div class="p">
    GitHub is the recommended issue repository. GitHub is the defacto
    repository of choice for open source projects. GitHub users may make
    reference to and consume the GitHub issues as they would with any other
    GitHub project without concern as to the Conveyor planning framework.
    GitHub also has a mature and usable API which allows us to integrate
    GitHub with standard Conveyor and third party tools.
  </div>
  <div class="p">
    GitHub's issue model is essentially forward compatible with the Conveyor
    model, which adds two key concepts. First, Conveyor projects are not
    limited to a single GitHub project, which may be referred to as
    sub-projects or components. Second, Conveyor requires isuses express
    dependency in order to determine availability.
  </div>
  <div class="p">
    Enter CodeTree. CodeTree allows us to create a project which merges the
    issues from any number of GitHub projects into a single group. When
    organized by milestones, issues from different projects with the same
    milestone (name) are presented together by milestone, just as we would
    like for the Conveyor sprint planning. Finally, CodeTree supports issue
    dependency through the addition of a 'needs' keyword, e.g.: <code>needs
    Organization/gh-project#3</code>.
  </div>
</section><!-- #Management-Tools -->
<section id="Issue-Specification">
  <h1>Issue Specification</h1>
  <h2>Availability</h2>
  <div class="p">
    An issue is considered available if it has no unmet dependencies and is
    not labeled as 'draft'. Any available issue is available to be worked and
    may be selected. Generally workers should prefer issues matching their
    skill set in the earliest incomplete project phase.
  </div>
  <h2>Sprints</h2>
  <div class="p">
    Sprints are planned on a month by month basis. Ideally, issues for a given
    sprint are set a couple days before or after the first of the
    month. Issue workers are not 



Issues may be updated mid-sprint in the case where external factors
    change significancly, though ideally the issues are locked down at the
    beginning of each month.
  </div>
  <div class="p">
    Follow on issues may be added inter-sprint, and the idea of "locking down
    the issues" should never deter anyone from improving, clarifying, or
    breaking down an issue. It's costly to force all that work to the
    front. Clarifications are not considered new work, and breaking down an
    issue, altough it does create new issues in the sprint, is considered just
    another form of editing.
  </div>
  <div class="p">
    Of course, if there's a straight up error in the plan, then truly new
    issues may be added and existing issues removed or replaced. The process
    is meant to guide and should not be followed slavishly to the point of
    incurring sunk work costs.
  </div>
  <h3>Planning Sprints</h3>
  <div class="p">

Most sprints fall into one of three categories. "Emergency fixes", "minor
feature releases", and "major feature releases".

Emergency fixes are non-planned rushes to fix production problems. Once in

==== Release Planning ====

Release planning beigns with a first draft of issues broken into "MVP",
"Bonus", and "Release" milestones. If you think in terms of "Alpha-Beta-Gold",
it's similary.

The process begins by talking about the release goals, which are captured in
the "X.Y Release" milestone issues, or may be immediately sorted into the "X.Y
MVP" and "X.Y Bonus" milestones. Either way, the goal is to enumerate a good
portion of the foreseeable or hoped-for goals.

Once a workable first draft of goals and obvious work is defined, the issues
are reviewed. Absolutely necessary user features are placed in the MVP
milestone. All other user features are sorted to the Bonus
milestone. Optimizations, polish, documentation as well as test and "external"
issues (e.g.: license acquisitions) are generally sorted to the Release
milestone, though there is no hard and fast rule.

Generally, workers should prefer "MVP" over "Bonus" over "Release". However,
workers may generally choose any available issue and are encouraged to apply
their particular knowledge of and beleifes regarding the release cycle to
issue selection.

==== Other Milestones ====

Planning projects is messy, so feel free to augment and replace the standard
milestones as necessary. Add dditional iterations for big releases. Break big
lists up into related feature sets. 
